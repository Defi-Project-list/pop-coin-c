{
  "address": "0xb2869F895FC24790e81EF05a3AeF0F23897eC33b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[4]",
          "name": "_dexRouterAddresses",
          "type": "address[4]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeToPay",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedRouter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tradeType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensTraded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "TokenTraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdminPaymentAddress",
          "type": "address"
        }
      ],
      "name": "changeAdminPaymentAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "changeDeployLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "changeLiquidityAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialBuyInEth",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dexRouterAddress",
          "type": "address"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "skip",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "take",
          "type": "uint256"
        }
      ],
      "name": "getOwnerTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "skip",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "take",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tradeType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensTraded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "notifyTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routersSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dexRouterAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "switchDexRouterSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCreators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FunToken",
          "name": "funToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32f085dada9b6fd84a3c09785a525f417da30d1fe2554d9f43a1e27d34bbd10f",
  "receipt": {
    "to": null,
    "from": "0x4ABda0097D7545dE58608F7E36e0C1cac68b4943",
    "contractAddress": "0xb2869F895FC24790e81EF05a3AeF0F23897eC33b",
    "transactionIndex": 1,
    "gasUsed": "3360713",
    "logsBloom": "0x
    "blockHash": "0x2f6807cbd66f5ef0bf3f36c157c6daf5f2550ea9ac21b6e4f8674d7f767341b7",
    "transactionHash": "0x32f085dada9b6fd84a3c09785a525f417da30d1fe2554d9f43a1e27d34bbd10f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10085492,
        "transactionHash": "0x32f085dada9b6fd84a3c09785a525f417da30d1fe2554d9f43a1e27d34bbd10f",
        "address": "0xb2869F895FC24790e81EF05a3AeF0F23897eC33b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004abda0097d7545de58608f7e36e0c1cac68b4943"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2f6807cbd66f5ef0bf3f36c157c6daf5f2550ea9ac21b6e4f8674d7f767341b7"
      }
    ],
    "blockNumber": 10085492,
    "cumulativeGasUsed": "3406679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xAAA45c8F5ef92a000a121d102F4e89278a711Faa",
      "0x39cd4db6460d8B5961F73E997E86DdbB7Ca4D5F6",
      "0x00aC989ddB7aEc2405a7f456De9E432c60A94283",
      "0x0000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 4,
  "solcInputHash": "ec3ab33f8559da93032a613da2bb11d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"_dexRouterAddresses\",\"type\":\"address[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeToPay\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensTraded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"TokenTraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminPaymentAddress\",\"type\":\"address\"}],\"name\":\"changeAdminPaymentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeDeployLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changeLiquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialBuyInEth\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexRouterAddress\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"take\",\"type\":\"uint256\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"take\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensTraded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"notifyTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routersSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"switchDexRouterSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FunToken\",\"name\":\"funToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PopCoinFactory.sol\":\"PopCoinFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/FunToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IDexRouter.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IPopCoinFactory {\\r\\n    function notifyTrade(address trader, address tokenAddress, uint tradeType, uint tradePrice, uint tradeAmount) external;\\r\\n}\\r\\n\\r\\n\\r\\n // Custom errors\\r\\nerror InsufficientETH(uint256 sent, uint256 required);\\r\\nerror InsufficientTokens(uint256 available, uint256 required);\\r\\nerror InsufficientContractETH(uint256 available, uint256 required);\\r\\nerror TransferFailed();\\r\\nerror BalanceExceeded(uint256 available, uint256 required);\\r\\nerror ExceededMaxBuy(uint maxBuy);\\r\\nerror LiquidityAlreadySent();\\r\\nerror SlippageExceeded(uint256 current, uint256 max);\\r\\nerror ExceedsMarketCap();\\r\\n\\r\\ncontract FunToken is ERC20, ReentrancyGuard, Ownable {\\r\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n\\tIDexRouter public immutable v2Router;\\r\\n\\tuint8 decimalPlaces=18;\\r\\n    uint256 public targetMarketCap;                // Target market cap in wei\\r\\n    uint256 public transactionFeePercent;                     // Fee percentage for transactions (in basis points)\\r\\n    address public feeAddress;                     // Address to receive transaction fees\\r\\n    uint256 public liquidityDeploymentPercent;     // Percentage of liquidity to deploy to DEX\\r\\n    address public routerAddress;                     // Address of the DEX to deploy liquidity to\\r\\n    uint256 public immutable fixedSupply=1_000_000_000 ether;          // Fixed supply of the token\\r\\n    uint256 public immutable initialFixedSupply=800_000_000 ether;          // Fixed supply of the token\\r\\n\\r\\n    uint256 public netBoughtTokens;                // Tracks the net amount of tokens bought\\r\\n    uint256 public ethPaid; \\r\\n\\tuint256 public maxBuy = 5 ether;\\r\\n    uint256 deployLiquidityFee=5 ether; \\r\\n\\r\\n    // address popCoinFactory;\\r\\n    IPopCoinFactory popCoinFactory;\\r\\n\\r\\n    bool public liquiditySent = false;\\r\\n\\r\\n    uint256 constant private MAX_INT = 2**256 - 1;\\r\\n\\r\\n     // Constants derived from the fitting y=f- t/(k+x) where x=supply in Sale Coin\\r\\n    uint256 private constant F = 1071000120;\\r\\n    uint256 private constant T = 11229068400;\\r\\n    uint256 private constant K = 10.48465702 ether;  // 10.48465702\\r\\n\\r\\n    // event BoughtToken(address indexed buyer, uint amountPaid);\\r\\n    // event SoldToken(address indexed buyer, uint amountPaid);\\r\\n    event LiquidityDeployed();\\r\\n\\r\\n    \\r\\n    uint256 private constant PRECISION = 10**18; // To maintain precision for Ether and token calculations\\r\\n\\r\\n    uint256 public liquidityAmount;\\r\\n    //todo\\r\\n    //resrtrict owner withdrawal until coins have been moved to DEX\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,        \\r\\n        uint256 _targetMarketCap,\\r\\n        uint256 _transactionFeePercent,\\r\\n        address _feeAddress,\\r\\n        uint256 _liquidityDeploymentPercent,\\r\\n        address _routerAddress,\\r\\n\\t\\taddress _creator,\\r\\n\\t\\tuint _initialBuyInEth,\\r\\n        uint256 _deployLiquidityFee,\\r\\n        uint256 _liquidityAmount\\r\\n    ) ERC20(name, symbol) Ownable(_creator) {\\r\\n        popCoinFactory=IPopCoinFactory( msg.sender);\\r\\n        targetMarketCap = _targetMarketCap;\\r\\n        transactionFeePercent = _transactionFeePercent;\\r\\n        feeAddress = _feeAddress;\\r\\n        liquidityDeploymentPercent = _liquidityDeploymentPercent;\\r\\n        routerAddress = _routerAddress;\\r\\n\\t\\tv2Router = IDexRouter(_routerAddress);\\r\\n        deployLiquidityFee=_deployLiquidityFee;\\r\\n        liquidityAmount=_liquidityAmount;\\r\\n        // console.log(\\\"INITIAL ethPaid %d \\\",ethPaid);\\r\\n        // Initially mint the initial fixed supply to the contract itself\\r\\n\\t\\tuint initialTokensForCreator = calculateNumberOfTokensToBuy(_initialBuyInEth);\\r\\n        _mint(address(this), initialFixedSupply - initialTokensForCreator);\\r\\n\\t\\t_mint(_creator, initialTokensForCreator);\\r\\n        ethPaid+=_initialBuyInEth;\\r\\n        netBoughtTokens+=initialTokensForCreator;\\r\\n        // console.log(\\\"INITIAL2 ethPaid %d \\\",ethPaid);\\r\\n\\r\\n        // console.log(\\\"creator %s , _initialBuyInEth %d, initialTokensForCreator %d \\\",_creator, _initialBuyInEth, initialTokensForCreator);\\r\\n    }\\r\\n\\r\\n\\tfunction decimals() public view virtual override returns (uint8) {\\r\\n\\t\\treturn decimalPlaces;\\r\\n\\t}\\r\\n\\r\\n    // returns actual no  not scaled t 18 decimals\\r\\n    function tokensIssued(uint supplyInEth) public pure returns (uint) {\\r\\n        \\r\\n        // Scale up supplyInEth by the precision factor to maintain accuracy during division\\r\\n        uint256 scaledSupply = (supplyInEth * PRECISION) / 10**18; // Now, scaledSupply has the same precision as 1 ETH\\r\\n\\r\\n        // Perform the calculation with scaledSupply\\r\\n        // Here, we add the precision factor to 30 to keep the units consistent during the calculation\\r\\n        uint256 result = F - T * PRECISION / (K  + scaledSupply);\\r\\n        // console.log(\\\"tokensIssued::  supplyInEth %d, tokens %d \\\",supplyInEth, result);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n\\r\\n    function price(uint supplyInEth) public pure returns (uint) {\\r\\n        uint tokensIssued = tokensIssued(supplyInEth);\\r\\n\\r\\n        return supplyInEth/tokensIssued;\\r\\n    }\\r\\n\\r\\n    // Function to calculate the amount of tokens T for given Ether (ETH) paid\\r\\n    function calculateNumberOfTokensToBuy( uint256 amount) public view returns (uint256) {\\r\\n        return calculateNumberOfTokensToBuy(ethPaid,amount);\\r\\n    }\\r\\n    // Function to calculate the amount of tokens T for given Ether (ETH) paid\\r\\n    function calculateNumberOfTokensToBuy(uint256 totalEthInContract, uint256 amount) public view returns (uint256) {\\r\\n        uint256 initialTokens = tokensIssued(totalEthInContract);\\r\\n        uint256 newEthTotal = totalEthInContract + amount;\\r\\n        uint256 finalTokens = tokensIssued(newEthTotal);\\r\\n\\r\\n        uint256 tokensToIssue = finalTokens - initialTokens;\\r\\n        // console.log('newEthTotal %d ',newEthTotal);\\r\\n        // console.log('totalEthInContract %d , initialTokens %d , finalTokens %d ',totalEthInContract, initialTokens, finalTokens);\\r\\n\\r\\n        return tokensToIssue * PRECISION;\\r\\n    }\\r\\n\\r\\n    // Function to calculate the amount of Ether (ETH) needed to buy a specific number of tokens (T)\\r\\n    function calculateNumberOfTokensToBuyWithTokens( uint256 amount) public view returns (uint256) {\\r\\n        return calculateNumberOfTokensToBuyWithTokens(ethPaid,amount);\\r\\n    }\\r\\n\\r\\n    // Function to calculate the amount of Ether (ETH) needed to buy a specific number of tokens (T)\\r\\n    function calculateNumberOfTokensToBuyWithTokens(uint256 totalEthInContract,  uint256 tokensToBuy) public view returns (uint256) {\\r\\n        \\r\\n        uint256 initialTokens = tokensIssued(totalEthInContract);\\r\\n        // console.log(\\\" initialTokens %d, tokensToBuy %d\\\", initialTokens, tokensToBuy);\\r\\n        uint256 targetTokens = (initialTokens*PRECISION + tokensToBuy)/PRECISION;\\r\\n        \\r\\n        // Invert the formula to solve for x (Ether) when we know y (tokens)\\r\\n        uint256 targetEth = T * PRECISION / (F - targetTokens) - K;\\r\\n        // console.log(\\\"targetTokens %d, targetEth %d, tokensToBuy %d\\\",targetTokens, targetEth, tokensToBuy);\\r\\n\\r\\n        uint256 ethNeeded = targetEth  - totalEthInContract;\\r\\n        // console.log(\\\"totalEthInContract %d, realBalance %d, ethNeeded %d\\\",totalEthInContract, address(this).balance, ethNeeded);\\r\\n        return ethNeeded;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n    // Function to calculate the amount of Ether (ETH) returned for selling a certain amount of tokens (T)\\r\\n    function calculateNumberOfETHSoldForToken( uint256 tokensToSell) public view returns (uint256) {\\r\\n        // console.log(\\\" ethPaid %d, tokensToSell %d\\\",ethPaid, tokensToSell);\\r\\n        return calculateNumberOfETHSoldForToken(ethPaid,tokensToSell);\\r\\n    }\\r\\n\\r\\n    function calculateNumberOfETHSoldForToken(uint256 totalEthInContract,  uint256 tokensToSell) public view returns (uint256) {\\r\\n        // console.log(\\\"SELLING:: tokensToSell %d \\\", tokensToSell );\\r\\n        uint256 initialTokens = tokensIssued(totalEthInContract);\\r\\n        // console.log(\\\"SELLING:: initialTokens %d , totalEthInContract %d \\\", initialTokens, totalEthInContract );\\r\\n        uint256 targetTokens = initialTokens - tokensToSell/PRECISION;\\r\\n\\r\\n        console.log(\\\"SELLING:: initialTokens %d, tokensToSell %d , targetTokens %d \\\", initialTokens,tokensToSell, targetTokens );\\r\\n\\r\\n        // // Invert the formula to solve for x (Ether) when we know y (tokens)\\r\\n        // // y = F - T / (K + x)\\r\\n        // // => T / (K + x) = F - y\\r\\n        // // => x = T / (F - y) - K\\r\\n        // // console.log(\\\"SELLING:: T  %d \\\", (T ) );\\r\\n        console.log(\\\"SELLING:: K  %d, K/PRECISION %d \\\", K, (K/PRECISION ) );\\r\\n        console.log(\\\"SELLING:: (F - targetTokens) %d \\\", (F - targetTokens) );\\r\\n        console.log(\\\"SELLING:: (T * PRECISION  / (F - targetTokens)) %d \\\", (T * PRECISION  / (F - targetTokens)) );\\r\\n        uint256 targetEth = (T * PRECISION  / (F - targetTokens)) - (K);\\r\\n        console.log(\\\"SELLING:: totalEthInContract %d, targetEth %d \\\",totalEthInContract,  targetEth );\\r\\n        uint256 ethToReturn = totalEthInContract - targetEth ;\\r\\n        console.log(\\\"SELLING:: ethToReturn %d \\\", ethToReturn );\\r\\n\\r\\n        return ethToReturn;\\r\\n    }\\r\\n\\r\\n    // function calculateNumberOfETHSoldForTokenOld(uint256 totalEthInContract,  uint256 tokensToSell) public view returns (uint256) {\\r\\n    //     // console.log(\\\"SELLING:: tokensToSell %d \\\", tokensToSell );\\r\\n    //     uint256 initialTokens = tokensIssued(totalEthInContract);\\r\\n    //     // console.log(\\\"SELLING:: initialTokens %d , totalEthInContract %d \\\", initialTokens, totalEthInContract );\\r\\n    //     uint256 targetTokens = initialTokens - tokensToSell/PRECISION;\\r\\n\\r\\n    //     // console.log(\\\"SELLING:: initialTokens %d, tokensToSell %d , targetTokens %d \\\", initialTokens,tokensToSell, targetTokens );\\r\\n\\r\\n    //     // Invert the formula to solve for x (Ether) when we know y (tokens)\\r\\n    //     // y = F - T / (K + x)\\r\\n    //     // => T / (K + x) = F - y\\r\\n    //     // => x = T / (F - y) - K\\r\\n    //     // console.log(\\\"SELLING:: (T * PRECISION) %d \\\", (T * PRECISION) );\\r\\n    //     // console.log(\\\"SELLING:: (F - targetTokens) %d \\\", (F - targetTokens) );\\r\\n    //     uint256 targetEth = (T * PRECISION / (F - targetTokens)) - (K);\\r\\n    //     console.log(\\\"SELLING:: targetEth %d \\\", targetEth );\\r\\n    //     uint256 ethToReturn = totalEthInContract - targetEth / PRECISION;\\r\\n    //     console.log(\\\"SELLING:: ethToReturn %d \\\", ethToReturn );\\r\\n\\r\\n    //     return ethToReturn;\\r\\n    // }\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // Helper function to calculate exponential in a fixed-point format\\r\\n    function exp(uint256 x) internal pure returns (uint256) {\\r\\n        // x is expected to be in the fixed-point format with 18 decimal places\\r\\n        // We use an approximation for e^x: exp(x) = sum(x^n / n!)\\r\\n        // For simplicity and avoiding excessive gas cost, we'll approximate up to 6 terms\\r\\n\\r\\n        uint256 term = x;\\r\\n        uint256 result = 1 ether; // e^0 = 1\\r\\n        result += term;\\r\\n\\r\\n        term = (term * x) / 1 ether; // x^2 / 2!\\r\\n        result += term / 2;\\r\\n\\r\\n        term = (term * x) / 1 ether; // x^3 / 3!\\r\\n        result += term / 6;\\r\\n\\r\\n        term = (term * x) / 1 ether; // x^4 / 4!\\r\\n        result += term / 24;\\r\\n\\r\\n        term = (term * x) / 1 ether; // x^5 / 5!\\r\\n        result += term / 120;\\r\\n\\r\\n        term = (term * x) / 1 ether; // x^6 / 6!\\r\\n        result += term / 720;\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Function to buy tokens by specifying the ETH amount\\r\\n    function buyWithETH(uint256 amount, uint256 maxSlippagePercent) external payable nonReentrant {\\r\\n        \\r\\n\\r\\n        if (liquiditySent) revert LiquidityAlreadySent();\\r\\n        if (amount > maxBuy) revert ExceededMaxBuy(maxBuy);\\r\\n        console.log('amount %d,ethPaid %d,targetMarketCap %d', amount ,ethPaid,targetMarketCap);\\r\\n        console.log('amount + ethPaid %d,targetMarketCap %d', amount + ethPaid,targetMarketCap);\\r\\n        if(amount + ethPaid>targetMarketCap) revert ExceedsMarketCap();\\r\\n        \\r\\n        uint256 fee = (amount * transactionFeePercent) / 10000;\\r\\n        uint256 netAmount = amount + fee;// in ETH\\r\\n        \\r\\n        if (netAmount > msg.value) revert InsufficientETH(msg.value, netAmount);\\r\\n\\r\\n        // Calculate the expected price per token (in ETH)\\r\\n        uint256 totalEthInContractBefore = ethPaid;// address(this).balance - msg.value;\\r\\n        // uint256 initialTokens = tokensIssued(totalEthInContractBefore);\\r\\n        uint256 expectedPricePerToken = amount / calculateNumberOfTokensToBuy(amount);\\r\\n\\r\\n        \\r\\n        // Calculate the number of tokens expected for the given ETH amount\\r\\n        uint256 tokensToBuy = calculateNumberOfTokensToBuy(ethPaid , amount);\\r\\n        ethPaid+= amount;\\r\\n        console.log('BUYWITHETH:: tokensToBuy %d, expectedPricePerToken: %d', tokensToBuy, expectedPricePerToken);\\r\\n        // Check the token balance available for sale\\r\\n        if (tokensToBuy > balanceOf(address(this))) revert InsufficientTokens(balanceOf(address(this)), tokensToBuy);\\r\\n\\r\\n        \\r\\n\\r\\n        // console.log('initialTokens %d, expectedPricePerToken: %d', initialTokens, expectedPricePerToken);\\r\\n        uint currentTokenBalance = balanceOf(address(this));\\r\\n        console.log('currentTokenBalance %d , tokensToBuy %d', currentTokenBalance, tokensToBuy);\\r\\n        // Perform the token transfer and handle fees\\r\\n        payable(feeAddress).transfer(fee);\\r\\n        _transfer(address(this), msg.sender, tokensToBuy);\\r\\n        netBoughtTokens += tokensToBuy; // Increase net bought tokens\\r\\n\\r\\n        currentTokenBalance = balanceOf(address(this));\\r\\n        console.log('currentTokenBalance after %d , tokensToBuy %d', currentTokenBalance, tokensToBuy);\\r\\n\\r\\n        // Calculate the actual price per token after the transaction\\r\\n        uint256 totalEthInContractAfter = ethPaid;// address(this).balance;\\r\\n        // uint256 finalTokens = tokensIssued(totalEthInContractAfter);\\r\\n        uint256 effectivePricePerToken = (totalEthInContractAfter - totalEthInContractBefore) / tokensToBuy;\\r\\n\\r\\n        // console.log('finalTokens %d, effectivePricePerToken: %d', finalTokens, effectivePricePerToken);\\r\\n        // Calculate the allowed slippage\\r\\n        uint256 maxAllowedSlippage = (expectedPricePerToken * (10000  + maxSlippagePercent)) / 10000 ;\\r\\n        // Ensure the effective price does not exceed the maximum allowed price with slippage\\r\\n        // require(effectivePricePerToken <= maxAllowedSlippage, \\\"Slippage too high\\\");\\r\\n        if (effectivePricePerToken > maxAllowedSlippage) {\\r\\n            revert SlippageExceeded(effectivePricePerToken, maxAllowedSlippage);\\r\\n        }\\r\\n\\r\\n        // emit BoughtToken(msg.sender, amount);\\r\\n        popCoinFactory.notifyTrade(msg.sender, address(this),0, tokensToBuy, amount );\\r\\n        // console.log('amount/(finalTokens-initialTokens) %d, effectivePricePerToken: %d', amount/(finalTokens-initialTokens), effectivePricePerToken);\\r\\n        // console.log('maxAllowedSlippage %d, expectedPricePerToken: %d', maxAllowedSlippage, effectivePricePerToken);\\r\\n        // console.log('Real ETH BAl %d, targetMarketCap: %d', address(this).balance, targetMarketCap);\\r\\n\\r\\n        // Deploy liquidity if the target market cap is reached\\r\\n\\r\\n        console.log('address(this).balance %d , netBoughtTokens %d, ethPaid %d', address(this).balance, netBoughtTokens, ethPaid);\\r\\n        if (address(this).balance >= targetMarketCap) {\\r\\n            _sendLiquidity();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Function to buy tokens by specifying the amount of tokens to buy, send cost of buying  plus tx fee\\r\\n    function buy(uint256 amount, uint256 maxSlippagePercent) external payable nonReentrant {\\r\\n        if(liquiditySent) revert LiquidityAlreadySent();\\r\\n        // uint256 pricePerToken = calculatePrice();\\r\\n        \\r\\n        uint256 totalCost = calculateNumberOfTokensToBuyWithTokens(ethPaid, amount); // in ETH\\r\\n\\r\\n\\t\\tuint256 fee = (totalCost * transactionFeePercent) / 10000; //in ETH\\r\\n        uint256 netAmount = totalCost + fee;// in ETH\\r\\n\\r\\n        if (totalCost > maxBuy) revert ExceededMaxBuy(maxBuy);\\r\\n\\r\\n        if (msg.value < netAmount) revert InsufficientETH(msg.value, netAmount);        \\r\\n\\r\\n        if (amount > balanceOf(address(this))) revert InsufficientTokens(balanceOf(address(this)), amount);\\r\\n\\r\\n        uint256 initialCost = calculateNumberOfTokensToBuyWithTokens( amount); // in ETH;\\r\\n\\r\\n\\t\\t\\r\\n        if (totalCost > initialCost * (10000 + maxSlippagePercent) / 10000) {\\r\\n            revert SlippageExceeded(totalCost, initialCost);\\r\\n        }\\r\\n\\r\\n        payable(feeAddress).transfer(fee);\\r\\n        _transfer(address(this), msg.sender, amount);\\r\\n\\r\\n        ethPaid+= totalCost;\\r\\n        netBoughtTokens += amount; // Increase net bought tokens\\r\\n        // emit BoughtToken(msg.sender, amount);\\r\\n        popCoinFactory.notifyTrade(msg.sender, address(this),0, amount, netAmount );\\r\\n\\r\\n        // Refund any excess ETH sent\\r\\n        if (msg.value > netAmount) {\\r\\n            payable(msg.sender).transfer(msg.value - netAmount);\\r\\n        }\\r\\n\\r\\n        // Deploy liquidity if the target market cap is reached\\r\\n        if (address(this).balance >= targetMarketCap) {\\r\\n            _sendLiquidity();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Function to sell tokens by specifying the amount of tokens\\r\\n    function sell(uint256 amount /*, uint maxSlippagePercent*/) external nonReentrant {\\r\\n        if(liquiditySent) revert LiquidityAlreadySent();\\r\\n        // uint256 pricePerToken = calculatePrice();\\r\\n        uint256 totalReward = calculateNumberOfETHSoldForToken(amount); // pricePerToken * amount;\\r\\n\\r\\n        if (address(this).balance < totalReward) revert InsufficientContractETH(address(this).balance, totalReward);\\r\\n\\r\\n        uint256 fee = (totalReward * transactionFeePercent) / 10000;\\r\\n        uint256 netReward = totalReward - fee;\\r\\n\\r\\n\\t\\t// uint256 finalPricePerToken = calculatePrice();\\r\\n        // if (finalPricePerToken > pricePerToken * (10000 + maxSlippagePercent) / 10000) {\\r\\n        //     revert SlippageExceeded(finalPricePerToken, pricePerToken * (10000 + maxSlippagePercent) / 10000);\\r\\n        // }\\r\\n\\r\\n        _transfer(msg.sender, address(this), amount);\\r\\n        payable(feeAddress).transfer(fee);\\r\\n        payable(msg.sender).transfer(netReward);\\r\\n        console.log('netBoughtTokens: %d',netBoughtTokens);\\r\\n        popCoinFactory.notifyTrade(msg.sender, address(this),1, amount, totalReward );\\r\\n        ethPaid-= totalReward;\\r\\n        netBoughtTokens -= amount; // Decrease net bought tokens\\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n    // // Function to sell tokens by specifying the ETH amount desired\\r\\n    // function sellWithETH(uint256 amount, uint maxSlippagePercent/* x 100  */) external nonReentrant {\\r\\n    //     if(liquiditySent) revert LiquidityAlreadySent();\\r\\n    //     if (address(this).balance < amount) revert InsufficientContractETH(address(this).balance, amount);\\r\\n\\r\\n    //     uint256 pricePerToken = calculatePrice();\\r\\n    //     uint256 tokensToSell = amount / pricePerToken;\\r\\n\\r\\n    //     uint256 totalReward = pricePerToken * tokensToSell;\\r\\n    //     uint256 fee = (totalReward * transactionFeePercent) / 10000;\\r\\n    //     uint256 netReward = totalReward - fee;\\r\\n\\r\\n    //     if (balanceOf(msg.sender) < tokensToSell) revert BalanceExceeded(balanceOf(msg.sender), tokensToSell);\\r\\n\\r\\n\\t// \\t// Recalculate price to check slippage\\r\\n    //     uint256 finalPricePerToken = calculatePrice();\\r\\n    //     if (finalPricePerToken < pricePerToken * (10000 - maxSlippagePercent) / 10000) {\\r\\n    //         revert SlippageExceeded(finalPricePerToken, pricePerToken * (10000 - maxSlippagePercent) / 10000);\\r\\n    //     }\\r\\n\\r\\n    //     _transfer(msg.sender, address(this), tokensToSell);\\r\\n    //     payable(feeAddress).transfer(fee);\\r\\n    //     payable(msg.sender).transfer(netReward);\\r\\n\\r\\n    //     netBoughtTokens -= tokensToSell; // Decrease net bought tokens\\r\\n    // }\\r\\n\\r\\n\\t//Todo - Check calculations for tokenAmount\\r\\n    // function _sendLiquidity() internal {\\r\\n    //     if (!liquiditySent && address(this).balance >= targetMarketCap) {\\r\\n    //         uint256 liquidityAmount = (address(this).balance * liquidityDeploymentPercent) / 10000;\\r\\n\\t// \\t\\tuint256 tokenAmount = calculateNumberOfTokensToBuy(liquidityAmount);\\r\\n    //         uint256 pricePerToken = calculateNumberOfTokensToBuy(1 ether);\\r\\n\\t// \\t\\t// uint256 tokenAmount = pricePerToken * liquidityAmount ;\\r\\n\\r\\n    //         console.log(\\r\\n    //             \\\"liq %d , pricePerToken %d tokenAmount %d tokens\\\",\\r\\n    //             liquidityAmount,\\r\\n    //             pricePerToken,\\r\\n    //             tokenAmount\\r\\n    //         );\\r\\n\\r\\n    //         IDexFactory factory = IDexFactory(v2Router.factory());\\r\\n    //         address lpTokenPairAddress = factory.getPair(address(this), v2Router.WETH());\\r\\n    //         if (lpTokenPairAddress == address(0)) {\\r\\n    //             lpTokenPairAddress = factory.createPair(address(this), v2Router.WETH());\\r\\n    //         }\\r\\n            \\r\\n\\t// \\t\\t_approve(address(this), address(v2Router), MAX_INT);//tokenAmount\\r\\n    //         _approve(address(this), lpTokenPairAddress, MAX_INT);//tokenAmount\\r\\n\\r\\n    //         // payable(routerAddress).transfer(liquidityAmount);\\r\\n\\r\\n\\t// \\t\\tv2Router.addLiquidityETH{ value: liquidityAmount }(\\r\\n\\t// \\t\\t\\taddress(this),\\r\\n\\t// \\t\\t\\ttokenAmount,    \\r\\n\\t// \\t\\t\\t0,\\r\\n\\t// \\t\\t\\t0,\\r\\n\\t// \\t\\t\\tfeeAddress, //test\\r\\n\\t// \\t\\t\\tblock.timestamp + 1200 //20 minutes from now\\r\\n\\t// \\t\\t);\\r\\n\\r\\n    //         liquiditySent=true;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function _sendLiquidity() internal {\\r\\n        if (!liquiditySent && address(this).balance >= targetMarketCap) {\\r\\n            \\r\\n            //Send all remaining fund to liquidity\\r\\n            uint256 liquidityAmount =  address(this).balance - deployLiquidityFee;\\r\\n\\r\\n            payable(feeAddress).transfer(deployLiquidityFee);\\r\\n            \\r\\n            uint currentTokenBalance = balanceOf(address(this));\\r\\n\\r\\n            //Mint 200m tokens to add\\r\\n\\t\\t\\tuint256 tokenAmount = 200_000_000 ether;\\r\\n            _mint(address(this), tokenAmount);\\r\\n            \\r\\n            console.log('currentTokenBalance %d , tokenAmount %d', currentTokenBalance, tokenAmount);\\r\\n            console.log('new bal mint %d ', balanceOf(address(this)));\\r\\n            if(currentTokenBalance>=0){//use balance if more than 200m\\r\\n                tokenAmount+=currentTokenBalance;\\r\\n            }\\r\\n\\r\\n            uint256 pricePerToken = liquidityAmount/tokenAmount;\\r\\n\\t\\t\\t// uint256 tokenAmount = pricePerToken * liquidityAmount ;\\r\\n\\r\\n            console.log(\\r\\n                \\\"liq %d , pricePerToken %d tokenAmount %d tokens\\\",\\r\\n                liquidityAmount,\\r\\n                pricePerToken,\\r\\n                tokenAmount\\r\\n            );\\r\\n\\r\\n            IDexFactory factory = IDexFactory(v2Router.factory());\\r\\n            address lpTokenPairAddress = factory.getPair(address(this), v2Router.WETH());\\r\\n            if (lpTokenPairAddress == address(0)) {\\r\\n                lpTokenPairAddress = factory.createPair(address(this), v2Router.WETH());\\r\\n            }\\r\\n            \\r\\n\\t\\t\\t_approve(address(this), address(v2Router), MAX_INT);//tokenAmount\\r\\n            _approve(address(this), lpTokenPairAddress, MAX_INT);//tokenAmount\\r\\n\\r\\n            // payable(routerAddress).transfer(liquidityAmount);\\r\\n\\r\\n\\t\\t\\t(,, uint256 liquidity) = v2Router.addLiquidityETH{ value: liquidityAmount }(\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\ttokenAmount,    \\r\\n\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\taddress(this), // feeAddress, //test\\r\\n\\t\\t\\t\\tblock.timestamp + 1200 //20 minutes from now\\r\\n\\t\\t\\t);\\r\\n\\r\\n            liquiditySent=true;\\r\\n\\r\\n            //TODO: Burn LP Tokens\\r\\n            // // Get the LP token (pair) address\\r\\n            // address pair = factory.getPair(address(this), v2Router.WETH());\\r\\n            // require(pair != address(0), \\\"Pair not found\\\");\\r\\n\\r\\n            // console.log('inital pair address: %s, final pair: %s', lpTokenPairAddress, pair);\\r\\n\\r\\n            \\r\\n\\r\\n            // uint newBalance =IERC20(lpTokenPairAddress).balanceOf(address(this));\\r\\n\\r\\n            // console.log('liquidity: %d, newBalance: %d', liquidity, newBalance);\\r\\n\\r\\n            // Transfer the LP tokens to the burn address\\r\\n            require(IERC20(lpTokenPairAddress).transfer(BURN_ADDRESS, liquidity), \\\"Burn LP tokens failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\t\\r\\n\\r\\n\\tfunction withdraw(address payable _to, uint256 _amount) public onlyOwner {\\r\\n        if(!liquiditySent){\\r\\n            revert('LiqdtyUnsent');\\r\\n        }\\r\\n        require(_amount <= payable(address(this)).balance);\\r\\n        safeTransferETH(_to, _amount);\\r\\n    }\\r\\n\\r\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    // Fallback function to receive ETH\\r\\n    receive() external payable {}\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x7aed262a8f2101d7d7045d475099c39ee60501cf023cd381f25444355c347176\",\"license\":\"AGPL-1.0\"},\"contracts/IDexRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IDexRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    \\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external  returns (uint amountA, uint amountB, uint liquidity) ;\\r\\n\\r\\n\\r\\n\\t\\r\\n    \\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\t\\r\\n\\t\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\t\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n\\t// Identical to swapExactTokensForTokens, but succeeds for tokens that take a fee on transfer.\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    \\r\\n}\\r\\n\\r\\ninterface IDexFactory {\\r\\n    function getPair(address token0, address token1) external view returns (address);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7148a79fc2f18b5f65b240b90c0696c3316194015aed638ae91753a5fd1e8e9\",\"license\":\"MIT\"},\"contracts/PopCoinFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.23;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./FunToken.sol\\\";\\r\\n\\r\\nerror NotEnoughFee(uint feeToPay);\\r\\nerror NotEnoughBalance(uint balance);\\r\\nerror UnsupportedRouter();\\r\\n\\r\\ncontract PopCoinFactory is Ownable {\\r\\n\\r\\n    event TokenCreated(address creator, address tokenAddress);\\r\\n\\r\\n    event TokenTraded(\\r\\n        address indexed trader, \\r\\n        address indexed tokenAddress, \\r\\n        uint indexed tradeType,  //0 for Buy, 1 for Sell\\r\\n        uint tokensTraded, \\r\\n        uint amountPaid\\r\\n    );\\r\\n    \\r\\n    mapping(address => address[]) public ownerTokens;\\r\\n\\r\\n    mapping(address => address) public tokenCreators; // token -> creator\\r\\n\\r\\n    uint public tokenCount;\\r\\n\\r\\n    address[] public tokens;\\r\\n\\r\\n    address private adminPaymentAddress;\\r\\n\\r\\n    uint public fee = 0.0005 ether;\\r\\n    uint public targetMarketCap=30 ether;\\r\\n\\r\\n    uint256 deployLiquidityFee=1.5 ether; \\r\\n\\r\\n    uint256 liquidityAmount=6 ether; \\r\\n\\r\\n    uint256 public transactionFeePercent=100; // Fee percentage for buy and sell - 1%\\r\\n    \\r\\n\\r\\n    mapping(address => bool) public routersSupported; \\r\\n    \\r\\n\\r\\n    constructor(address[4] memory _dexRouterAddresses) Ownable(msg.sender) {\\r\\n        adminPaymentAddress=msg.sender;\\r\\n        // dexRouterAddress=_dexRouterAddress;\\r\\n\\r\\n        for(uint i=0; i< _dexRouterAddresses.length; i++){\\r\\n            if(_dexRouterAddresses[i]!= address(0)){\\r\\n                routersSupported[_dexRouterAddresses[i]]= true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function switchDexRouterSupport(address _dexRouterAddress, bool supported) public onlyOwner {\\r\\n        if(_dexRouterAddress!= address(0)){\\r\\n            routersSupported[_dexRouterAddress]= supported;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    // \\r\\n    function createToken(string memory name,string memory symbol,uint _initialBuyInEth, address dexRouterAddress) public payable {\\r\\n\\r\\n        if(msg.value<fee+_initialBuyInEth) revert NotEnoughFee(fee);\\r\\n\\r\\n        if(!routersSupported[dexRouterAddress]) revert UnsupportedRouter();\\r\\n                \\r\\n        FunToken token = new FunToken(name, symbol, targetMarketCap,transactionFeePercent, adminPaymentAddress,  20, dexRouterAddress, msg.sender,_initialBuyInEth, deployLiquidityFee, liquidityAmount );\\r\\n        address tokenAddress = address(token);\\r\\n\\r\\n        if(_initialBuyInEth>0){\\r\\n            (bool success, ) = tokenAddress.call{value: _initialBuyInEth}(\\\"\\\");\\r\\n            require(success, \\\"Transfer InitialEth failed\\\");\\r\\n        }\\r\\n        \\r\\n        ownerTokens[msg.sender].push(tokenAddress);\\r\\n        tokenCreators[tokenAddress]=msg.sender;\\r\\n        tokens.push(tokenAddress);\\r\\n\\r\\n\\r\\n        \\r\\n        emit TokenCreated(msg.sender, tokenAddress);\\r\\n        tokenCount++;       \\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function  getTokens(uint skip, uint take) public view returns(address[] memory) {\\r\\n        address[] memory list = new address[](take) ;\\r\\n        for (uint256 i=skip; i < skip + take ; i++) {\\r\\n            list[i-skip] = tokens[i]; \\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n   \\r\\n   function  getOwnerTokensCount(address owner) public view returns(uint) {\\r\\n        \\r\\n        return ownerTokens[owner].length;\\r\\n    }\\r\\n\\r\\n    function  getTokenCreator(address token) public view returns(address) {\\r\\n        \\r\\n        return tokenCreators[token];\\r\\n    }\\r\\n\\r\\n    function  getOwnerTokens(address owner,uint skip, uint take) public view returns(address[] memory) {\\r\\n        address[] memory list = new address[](take) ;\\r\\n        for (uint256 i=skip; i < skip + take ; i++) {\\r\\n            list[i-skip] = ownerTokens[owner][i]; \\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    function  changeAdminPaymentAddress(address newAdminPaymentAddress) public onlyOwner  {\\r\\n        \\r\\n        adminPaymentAddress = newAdminPaymentAddress;\\r\\n    }\\r\\n\\r\\n    function  changeFee(uint newFee) public onlyOwner  {\\r\\n        \\r\\n        fee = newFee;\\r\\n    }\\r\\n\\r\\n    function  changeDeployLiquidityFee(uint newFee) public onlyOwner  {\\r\\n        \\r\\n        deployLiquidityFee = newFee;\\r\\n    }\\r\\n\\r\\n    function  changeLiquidityAmount(uint newAmount) public onlyOwner  {\\r\\n        \\r\\n        liquidityAmount = newAmount;\\r\\n    }\\r\\n\\r\\n    function  withdrawFrom(FunToken funToken, uint amount) public onlyOwner  {\\r\\n        \\r\\n        funToken.withdraw(payable(msg.sender), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function  withdrawFee(address to, uint amount) public onlyOwner  {\\r\\n        \\r\\n        uint balance = address(this).balance;\\r\\n        if(amount>=balance){\\r\\n            if(to==address(0)){\\r\\n                to=adminPaymentAddress;\\r\\n            }\\r\\n\\r\\n            payable(to).transfer(amount);\\r\\n        }else {\\r\\n            revert NotEnoughBalance(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function notifyTrade(address trader, address tokenAddress, uint tradeType, uint tokensTraded, uint amountPaid) public {\\r\\n        if(tokenAddress!= msg.sender || tokenCreators[tokenAddress]==address(0)){// token is not issued by Factory\\r\\n            revert('Token Not Issued by Factory');\\r\\n        }\\r\\n\\r\\n        emit TokenTraded(trader,tokenAddress,tradeType,tokensTraded,amountPaid);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x92541592abf1500c375a31c37b29d6b3507ad072cbfb13bfbb21fd00b2be21d2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461019757601f61397538819003918201601f19168301926001600160401b039290918385118386101761019c5781906040958652833981016080828203126101975780601f8301121561019757835192608084019081118482101761019c57845282916080810191821161019757915b81831061017757505050331561015f57600080546001600160a01b03198082163390811784556001600160a01b039283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36601c6bf526340006006556801a055690d9db800006007556714d1120d7b1600006008556753444835ec5800006009556064600a5533906005541617600555815b6004811061011e57845161379b90816101da8239f35b808261012c600193876101b2565b5116610139575b01610108565b8261014482876101b2565b51168452600b602052858420805460ff191683179055610133565b8151631e4fbdf760e01b815260006004820152602490fd5b82516001600160a01b038116810361019757815260209283019201610072565b600080fd5b634e487b7160e01b600052604160045260246000fd5b9060048110156101c35760051b0190565b634e487b7160e01b600052603260045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081630c8f5e0014610b20575080631f0cc87414610a9057806328b6003114610a3757806334f359f914610734578063494cfc6c146106b55780634f64b2be1461067557806360bf8c9f146106355780636a1db1bf14610613578063715018a6146105b657806371563f141461057e5780638769678d1461055c5780638da5cb5b14610534578381639470b0bd1461048f575080639f181b5e14610470578063aef9093314610393578063c085221214610355578063c78418b91461031a578063ce7e8de81461031a578063da1d6faf146102fb578063dc8fdf2b14610297578063ddca3f4314610278578063f2fde38b146101ed578063f91ef146146101c75763fd9be5221461012d57600080fd5b346101c357816003193601126101c357610145610b3c565b9060243591610152610d65565b908190478085106101ad57508593849384938493506001600160a01b03908116156101a1575b83918315610197575b1690f11561018d575080f35b51903d90823e3d90fd5b6108fc9250610181565b60055481169150610178565b85516374e0caad60e01b81529182015260249150fd5b8280fd5b8382346101e95760203660031901126101e9576101e2610d65565b3560085580f35b5080fd5b50346101c35760203660031901126101c357610207610b3c565b90610210610d65565b6001600160a01b03918216928315610262575050600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b5050346101e957816003193601126101e9576020906006549051908152f35b5050346101e957806003193601126101e9576102b1610b3c565b90602435918215158093036102f7576102c8610d65565b6001600160a01b0316806102da578380f35b8352600b60205282209060ff801983541691161790553880808380f35b8380fd5b5050346101e957816003193601126101e9576020906007549051908152f35b5050346101e95760203660031901126101e9576020916001600160a01b0390829082610344610b3c565b168152600285522054169051908152f35b5050346101e95760203660031901126101e95760209160ff9082906001600160a01b03610380610b3c565b168152600b855220541690519015158152f35b5090346101c35760a03660031901126101c3576103ae610b3c565b916001600160a01b036024358181169391929084900361046b57338414801590610456575b6104145750807f3fce0d3dc25c88725ebdc9a5d57f2cbb7bb700c5a1f5973d754a6416310a420a91519260643584526084356020850152604435951692a480f35b6020606492519162461bcd60e51b8352820152601b60248201527f546f6b656e204e6f742049737375656420627920466163746f727900000000006044820152fd5b508386526002602052828287205416156103d3565b600080fd5b5050346101e957816003193601126101e9576020906003549051908152f35b8084843461053057816003193601126105305780356001600160a01b0381169081900361052b576104be610d65565b803b1561052b578390604484518096819363f3fef3a360e01b8352338784015260243560248401525af18015610521576104f6578380f35b67ffffffffffffffff831161050e5750528180808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b505050fd5b5050fd5b5050346101e957816003193601126101e957905490516001600160a01b039091168152602090f35b8382346101e95760203660031901126101e957610577610d65565b3560095580f35b5050346101e95760203660031901126101e95760209181906001600160a01b036105a6610b3c565b1681526001845220549051908152f35b83346106105780600319360112610610576105cf610d65565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8382346101e95760203660031901126101e95761062e610d65565b3560065580f35b83346106105760203660031901126106105761064f610b3c565b610657610d65565b60018060a01b03166001600160601b0360a01b600554161760055580f35b5091346106105760203660031901126106105782359254831015610610575061069f602092610b97565b905491519160018060a01b039160031b1c168152f35b5082346106105782600319360112610610575035602435906106d682610caf565b92815b6106e38484610ce1565b811015610723576001816106f96106e393610b97565b838060a01b0391549060031b1c1661071a6107148784610d04565b89610d11565b520190506106d9565b8151806107308782610b52565b0390f35b50919060803660031901126101e95767ffffffffffffffff9280358481116102f7576107639036908301610c50565b916024948535818111610a335761077d9036908501610c50565b6001600160a01b0394604435916064358781169190829003610a2f576006546107a68582610ce1565b3410610a1a5750818952602094600b865260ff878b20541615610a0a5760075492600a54908a6005541660085492600954958b51986129d4808b01978b8910908911176109f6578c6101409795936108168d9c9b9a989694610823948e610d929039610160808b528a0190610d25565b9188830390890152610d25565b978d86015260608501526080840152601460a084015260c08301523360e0830152876101008301526101208201520152039087f080156109ec5785879116918061096c575b50503386526001825282862094855468010000000000000000968782101561095a579061089a91600182018155610be4565b81549060031b908385831b921b191617905581875260028352838720336001600160601b0360a01b825416179055845495861015610948576109038660017fd5f9bdf12adf29dab0248c349842c3822d53ae2bb4f36352f301630d018c81399798018855610b97565b819291549060031b9184831b921b1916179055825191338352820152a1600354906000198214610937575060010160035580f35b634e487b7160e01b83526011905250fd5b634e487b7160e01b8752604185528787fd5b634e487b7160e01b8952604187528989fd5b81808092855af13d156109e7573d61098381610c34565b9061099086519283610bfc565b815287843d92013e5b156109a5578538610868565b825162461bcd60e51b8152808501839052601a818901527f5472616e7366657220496e697469616c457468206661696c65640000000000006044820152606490fd5b610999565b83513d88823e3d90fd5b5050634e487b7160e01b8f5260418d528f8ffd5b865163ac566cef60e01b81528890fd5b878b91885191632b2d105360e21b8352820152fd5b8880fd5b8580fd5b5050346101e957806003193601126101e957610a51610b3c565b6001600160a01b0390811683526001602052818320805460243594908510156106105750602093610a8191610be4565b92905490519260031b1c168152f35b82843461061057606036600319011261061057610aab610b3c565b6044359160243591610abc84610caf565b916001600160a01b03918216845b610ad48787610ce1565b811015610b13576001610ad4918385528160205285610af5828c8820610be4565b90549060031b1c16610b0a6107148a84610d04565b52019050610aca565b8751806107308782610b52565b8490346101e957816003193601126101e957602090600a548152f35b600435906001600160a01b038216820361046b57565b602090602060408183019282815285518094520193019160005b828110610b7a575050505090565b83516001600160a01b031685529381019392810192600101610b6c565b600454811015610bce5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015610bce5760005260206000200190600090565b90601f8019910116810190811067ffffffffffffffff821117610c1e57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610c1e57601f01601f191660200190565b81601f8201121561046b57803590610c6782610c34565b92610c756040519485610bfc565b8284526020838301011161046b57816000926020809301838601378301015290565b67ffffffffffffffff8111610c1e5760051b60200190565b90610cb982610c97565b610cc66040519182610bfc565b8281528092610cd7601f1991610c97565b0190602036910137565b91908201809211610cee57565b634e487b7160e01b600052601160045260246000fd5b91908203918211610cee57565b8051821015610bce5760209160051b010190565b919082519283825260005b848110610d51575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610d30565b6000546001600160a01b03163303610d7957565b60405163118cdaa760e01b8152336004820152602490fdfe60e060405234610554576129d48038038061001981610559565b928339810190610160818303126105545780516001600160401b038111610554578261004691830161057e565b602082015190926001600160401b0382116105545761006691830161057e565b9160408201519160608101519261007f608083016105e9565b9060a083015161009160c085016105e9565b9061009e60e086016105e9565b96610100860151986101406101208801519701519780519060018060401b0382116104365760035490600182811c9216801561054a575b60208310146104165781601f8493116104dd575b50602090601f83116001146104575760009261044c575b50508160011b916000199060031b1c1916176003555b8051906001600160401b0382116104365760045490600182811c9216801561042c575b60208310146104165781601f8493116103a9575b50602090601f831160011461032357600092610318575b50508160011b916000199060031b1c1916176004555b60016005556001600160a01b039388851680156102ff57600654818782167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360018060a81b03199182600960a11b921617176006556b033b2e3c9fd0803ce800000060a0526b0295be96e64066972000000060c052674563918244f40000600e5560105490339116176010556007556008558260018060a01b03199416846009541617600955600a55168091600b541617600b55608052600f55601155610261600d5461025c610257856102518461068e565b9361060a565b61068e565b6105fd565b90670de0b6b3a7640000918281029281840414901517156102e9576102b5926102a2836102aa9361029d6102978360c0516105fd565b30610617565b610617565b600d5461060a565b600d55600c5461060a565b600c556040516122db90816106f982396080518181816106220152611dff015260a051816101ea015260c051816114a10152f35b634e487b7160e01b600052601160045260246000fd5b604051631e4fbdf760e01b815260006004820152602490fd5b015190503880610164565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b8181106103915750908460019594939210610378575b505050811b0160045561017a565b015160001960f88460031b161c1916905538808061036a565b92936020600181928786015181550195019301610354565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81016020851061040f575b90849392915b601f830160051c8201811061040057505061014d565b600081558594506001016103ea565b50806103e4565b634e487b7160e01b600052602260045260246000fd5b91607f1691610139565b634e487b7160e01b600052604160045260246000fd5b015190503880610100565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9350601f198516905b8181106104c557509084600195949392106104ac575b505050811b01600355610116565b015160001960f88460031b161c1916905538808061049e565b92936020600181928786015181550195019301610488565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c810160208510610543575b90849392915b601f830160051c820181106105345750506100e9565b6000815585945060010161051e565b5080610518565b91607f16916100d5565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761043657604052565b919080601f840112156105545782516001600160401b038111610436576020906105b0601f8201601f19168301610559565b928184528282870101116105545760005b8181106105d657508260009394955001015290565b85810183015184820184015282016105c1565b51906001600160a01b038216820361055457565b919082039182116102e957565b919082018092116102e957565b6001600160a01b0316908115610675577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208261065960009460025461060a565b60025584845283825260408420818154019055604051908152a3565b60405163ec442f0560e01b815260006004820152602490fd5b670de0b6b3a7640000808202918083048214901517156102e957679180fc0274e7d800910481018091116102e95780156106e257633fd62a38906b244877b9b6a27473abc000000481039081116102e95790565b634e487b7160e01b600052601260045260246000fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826305c868101461148a575081630660b3871461146b57816306f697751461144857816306fdde031461135157816308ff45a214611335578163095ea7b31461128b5781630bc37e6914610e225781630c8f5e0014610e0357816314082f0214610de757816318160ddd14610dc857816323b872dd14610ccf57816326a49e3714610ca5578163313ce56714610c805781633268cc5614610c575781634127535814610c2e5781635cc4c74114610c0e57816370a0823114610bd757816370baed4314610bb857816370db69d614610b99578163715018a614610b3b578163867433d014610b145781638da5cb5b14610aeb57816395d89b41146109ce5781639655b32c146109ab578163a9059cbb1461097a578163b80c51c814610954578163c80a91bc14610931578163d325aa4f14610912578163d6febde8146106be578163da1d6faf1461069f578163dd62ed3e14610651578163deadbc141461060d578163e4849b3214610457578163e71bfbeb14610438578163f2fde38b146103a7578163f3fef3a31461022d57508063fccc2813146102115763ff99574b146101d45780610012565b3461020d578160031936011261020d57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b503461020d578160031936011261020d576020905161dead8152f35b919050346103a357806003193601126103a35781356001600160a01b0381169081900361039f57602435906102606121e2565b60ff60105460a01c161561036d5747821161036957825191602083019167ffffffffffffffff9380841085851117610354578386528790528692839283925af1903d1561034e573d908111610339578251906102c6601f8201601f1916602001836115ad565b81528460203d92013e5b156102d9578280f35b906020608492519162461bcd60e51b8352820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152fd5b604184634e487b7160e01b6000525260246000fd5b506102d0565b604187634e487b7160e01b6000525260246000fd5b8480fd5b825162461bcd60e51b8152602081860152600c60248201526b131a5c591d1e555b9cd95b9d60a21b6044820152606490fd5b8380fd5b8280fd5b9050346103a35760203660031901126103a3576103c261151f565b906103cb6121e2565b6001600160a01b03918216928315610422575050600654826bffffffffffffffffffffffff60a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b50503461020d578160031936011261020d57602090600d549051908152f35b9050346103a35760203660031901126103a357803590610475611ad6565b60ff60105460a01c166105ff5761048e82600d5461163c565b928347106105e2579084916127106104a860085487611629565b046104b38187611606565b6104be863033611af9565b8480808060018060a01b039586600954168282156105d9575bf1156105cf5784808080938181156105c6575b3390f1156105bc57610528600c54835161050381611591565b60138152721b995d109bdd59da1d151bdad95b9cce880959606a1b6020820152611a91565b6010541691823b1561039f57839260a484928451958693849263aef9093360e01b84523390840152306024840152600160448401528960648401528a60848401525af19081156105b3575061059f575b505061058961059492600d54611606565b600d55600c54611606565b600c55600160055580f35b6105a89061154b565b6103a3578238610578565b513d84823e3d90fd5b81513d85823e3d90fd5b506108fc6104ea565b82513d86823e3d90fd5b506108fc6104d7565b908360449247905192633689605760e21b84528301526024820152fd5b825163c9c297f760e01b8152fd5b50503461020d578160031936011261020d57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461020d578060031936011261020d5760209161066e61151f565b82610677611535565b6001600160a01b03928316845260018652922091166000908152908352819020549051908152f35b50503461020d578160031936011261020d576020906007549051908152f35b83836106c936611504565b936106d2611ad6565b60ff60105460a01c166105ff57600d54916106ed81846118f9565b61271090816106fe60085483611629565b049161070a83836118ec565b95600e548084116108fc57508634106108e05730895288602052878920548086116108c457508461073a916118f9565b9881018082116108b15761074e908a611629565b0481116108955786808080809b5060018060a09c9b9c1b0395866009541682821561088c575bf1156108825761079190610789843330611af9565b600d546118ec565b600d556107a082600c546118ec565b600c556010541691823b1561036957855163aef9093360e01b815233918101918252306020830152600060408301526060820192909252608081018490529091849183919082908490829060a00103925af1908115610878578391610864575b505080341161082d575b505050476007541115610820575b600160055580f35b610828611bf6565b610818565b818061083a819334611606565b81811561085b575b3390f11561085157818161080a565b51903d90823e3d90fd5b506108fc610842565b61086d9061154b565b61020d578185610800565b84513d85823e3d90fd5b86513d87823e3d90fd5b506108fc610774565b83886044928851926371c4efed60e01b84528301526024820152fd5b634e487b7160e01b895260118652602489fd5b86866044928b519263c7bcc1b960e01b84528301526024820152fd5b875162fdf57560e51b8152348188015260248101889052604490fd5b866024918a51916335fcf16360e01b8352820152fd5b50503461020d578160031936011261020d57602090600c549051908152f35b50503461020d5760209061094d61094736611504565b906119a6565b9051908152f35b828434610977576020366003190112610977575061094d60209235600d5461163c565b80fd5b50503461020d578060031936011261020d576020906109a461099a61151f565b6024359033611af9565b5160018152f35b828434610977576020366003190112610977575061094d60209235600d546118f9565b8284346109775780600319360112610977578151918184549260018460011c9160018616958615610ae1575b6020968785108114610ace579087899a92868b999a9b529182600014610aa4575050600114610a49575b8588610a4589610a36848a03856115ad565b519282849384528301906114c4565b0390f35b815286935091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610a8c5750505082010181610a36610a4588610a24565b8054848a018601528895508794909301928101610a72565b60ff19168882015294151560051b87019094019450859350610a369250610a459150899050610a24565b634e487b7160e01b835260228a52602483fd5b92607f16926109fa565b50503461020d578160031936011261020d5760065490516001600160a01b039091168152602090f35b50503461020d578160031936011261020d5760209060ff60105460a01c1690519015158152f35b8334610977578060031936011261097757610b546121e2565b600680546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461020d578160031936011261020d57602090600e549051908152f35b50503461020d578160031936011261020d576020906011549051908152f35b50503461020d57602036600319011261020d5760209181906001600160a01b03610bff61151f565b16815280845220549051908152f35b828434610977576020366003190112610977575061094d6020923561195d565b50503461020d578160031936011261020d5760095490516001600160a01b039091168152602090f35b50503461020d578160031936011261020d57600b5490516001600160a01b039091168152602090f35b50503461020d578160031936011261020d5760209060ff60065460a01c169051908152f35b828434610977576020366003190112610977575061094d60209235610cc98161195d565b906115fc565b8391503461020d57606036600319011261020d57610ceb61151f565b610cf3611535565b91604435938560018060a01b03841691828152600160205220336000526020528560002054916000198303610d31575b6020876109a4888888611af9565b858310610d9c578115610d85573315610d6e57506000908152600160209081528682203383528152908690209185900390915582906109a4610d23565b6024906000885191634a1406b160e11b8352820152fd5b602490600088519163e602df0560e01b8352820152fd5b8651637dc7a0d960e11b8152339181019182526020820193909352604081018690528291506060010390fd5b50503461020d578160031936011261020d576020906002549051908152f35b50503461020d5760209061094d610dfd36611504565b906118f9565b50503461020d578160031936011261020d576020906008549051908152f35b8383610e2d36611504565b93610e36611ad6565b60ff60105460a01c166105ff57600e548083116112755750600d5460075495845196610e6188611575565b60278852610ea781848760209b7f616d6f756e742025642c657468506169642025642c7461726765744d61726b658d820152661d10d85c08095960ca1b8b8201526119e1565b610efc81610eb585886118ec565b8851610ec081611575565b602681527f616d6f756e74202b20657468506169642025642c7461726765744d61726b65748c8201526510d85c08095960d21b8a820152611a46565b610f0683866118ec565b11611265576127109081610f1c60085487611629565b0491610f2883876118ec565b3481116112485750610f43610f3d87866119a6565b876115fc565b610f4d87866119a6565b94610f5888826118ec565b600d55610fb882878d7f425559574954484554483a3a20746f6b656e73546f4275792025642c206578708d5191610f8e83611575565b60368352820152751958dd1959141c9a58d954195c951bdad95b8e88095960521b8d820152611a46565b308a52898b52888a205480871161122c5750308a52898b52611021868a8c20548d7f63757272656e74546f6b656e42616c616e6365202564202c20746f6b656e73548d519161100683611575565b60278352820152661bd09d5e48095960ca1b8d820152611a46565b8980808060018060a01b03988960095416828215611223575bf11561121957856110cb6110d0926110c3838f8f908f91826c1bdad95b9cd51bd09d5e480959609a1b9161106f863330611af9565b61107b86600c546118ec565b600c553081528084522054927f63757272656e74546f6b656e42616c616e6365206166746572202564202c20748151936110b485611575565b602d8552840152820152611a46565b600d54611606565b6115fc565b9282019081831161120657906110e591611629565b04908181116111ea5750506010541691823b156111e657845163aef9093360e01b8152339181019182523060208301526000604083015260608201929092526080810193909352918491839182908490829060a00103925af180156111da576111c7575b506111b5919247600c54917f75676874546f6b656e732025642c206574685061696420256400000000000000600d54947f616464726573732874686973292e62616c616e6365202564202c206e6574426f8151936111a685611575565b603985528401528201526119e1565b47600754111561082057600160055580f35b916111d46111b59361154b565b91611149565b505051903d90823e3d90fd5b8580fd5b60449185918851926371c4efed60e01b84528301526024820152fd5b634e487b7160e01b8a526011875260248afd5b88513d8b823e3d90fd5b506108fc61103a565b87876044928c519263c7bcc1b960e01b84528301526024820152fd5b875162fdf57560e51b815234818801526024810191909152604490fd5b8451635c3ac05760e01b81528390fd5b83516335fcf16360e01b81529182015260249150fd5b9050346103a357816003193601126103a3576112a561151f565b60243590331561131e576001600160a01b031691821561130757508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b50503461020d5760209061094d61134b36611504565b9061163c565b828434610977578060031936011261097757815191816003549260018460011c916001861695861561143e575b6020968785108114610ace578899509688969785829a5291826000146114175750506001146113bb575b505050610a459291610a369103856115ad565b9190869350600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106113ff5750505082010181610a36610a456113a8565b8054848a0186015288955087949093019281016113e6565b60ff19168782015293151560051b86019093019350849250610a369150610a4590506113a8565b92607f169261137e565b828434610977576020366003190112610977575061094d60209235600d546119a6565b50503461020d578160031936011261020d57602090600a549051908152f35b84903461020d578160031936011261020d576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b919082519283825260005b8481106114f0575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016114cf565b604090600319011261151a576004359060243590565b600080fd5b600435906001600160a01b038216820361151a57565b602435906001600160a01b038216820361151a57565b67ffffffffffffffff811161155f57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761155f57604052565b6040810190811067ffffffffffffffff82111761155f57604052565b90601f8019910116810190811067ffffffffffffffff82111761155f57604052565b80156115e6576b244877b9b6a27473abc000000490565b634e487b7160e01b600052601260045260246000fd5b81156115e6570490565b9190820391821161161357565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561161357565b6116458161195d565b9061165a670de0b6b3a7640000840483611606565b906116c48260409586519561166e87611575565b603e87526020967f53454c4c494e473a3a20696e697469616c546f6b656e732025642c20746f6b65888201527f6e73546f53656c6c202564202c20746172676574546f6b656e73202564200000898201526119e1565b8351916116d083611591565b8383527f53454c4c494e473a3a204b202025642c204b2f505245434953494f4e20256420848401528451611743816117208782019663ca47c4eb60e01b88526060602484015260848301906114c4565b679180fc0274e7d8006044830152600a606483015203601f1981018352826115ad565b60008094819251906a636f6e736f6c652e6c6f675afa50633fd62a389081039081116118d857806117a961180e92875161177c81611591565b8781527f53454c4c494e473a3a202846202d20746172676574546f6b656e73292025642088820152611a91565b6118096117b5826115cf565b87516117c081611575565b603381527f53454c4c494e473a3a202854202a20505245434953494f4e20202f202846202d88820152720103a30b933b2ba2a37b5b2b73994949012b21606d1b89820152611a91565b6115cf565b679180fc0274e7d7ff198101929083116118c45750916118a782846118a287956118c1977f53454c4c494e473a3a20657468546f52657475726e2025642000000000000000995161185e81611575565b602e81527f53454c4c494e473a3a20746f74616c457468496e436f6e74726163742025642c888201526d0103a30b933b2ba22ba341012b2160951b89820152611a46565b611606565b93849251916118b583611591565b60198352820152611a91565b90565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b9190820180921161161357565b906119038261195d565b670de0b6b3a7640000918282029180830484149015171561161357611927916118ec565b04633fd62a3890810390811161161357611940906115cf565b679180fc0274e7d7ff19810191908211611613576118c191611606565b670de0b6b3a76400008082029180830482149015171561161357679180fc0274e7d8009104810180911161161357611994906115cf565b633fd62a389081039081116116135790565b6118a26119bf6119c4936119b98461195d565b936118ec565b61195d565b670de0b6b3a7640000908181029181830414901517156116135790565b9092611a33600094938594604051938492611a15602085019763a7a8785360e01b89526080602487015260a48601906114c4565b9260448501526064840152608483015203601f1981018352826115ad565b51906a636f6e736f6c652e6c6f675afa50565b60009291611a338493604051928391611a78602084019663ca47c4eb60e01b88526060602486015260848501906114c4565b916044840152606483015203601f1981018352826115ad565b600091908291611a336040518092611ac26020830195632d839cb360e21b87526040602485015260648401906114c4565b90604483015203601f1981018352826115ad565b600260055414611ae7576002600555565b604051633ee5aeb560e01b8152600490fd5b916001600160a01b03808416928315611bbe5716928315611ba55760009083825281602052604082205490838210611b73575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b9081602091031261151a57516001600160a01b038116810361151a5790565b60ff60105460a01c1615806121d6575b611c0c57565b600f54611c198147611606565b90600080808060018060a01b039485600954168282156121cd575bf1156121c15730600052602060008152604080600020549230156121a957600254936aa56fa5b99019a5c80000009081860180961161161357606095600255306000526000855283600020828154019055835182815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef873093a36000808551611cbf81611575565b602781527f63757272656e74546f6b656e42616c616e6365202564202c20746f6b656e416d88820152661bdd5b9d08095960ca1b878201528651611d3981611d1f8b82019463ca47c4eb60e01b865260249d8e84015260848301906114c4565b87604483015288606483015203601f1981018352826115ad565b51906a636f6e736f6c652e6c6f675afa503060005260008552611d8684600020548551611d6581611591565b601081526f03732bb903130b61036b4b73a1012b2160851b88820152611a91565b810180911161219457611dee81611d9d81896115fc565b888651611da981611575565b602f81527f6c6971202564202c207072696365506572546f6b656e20256420746f6b656e41898201526e6d6f756e7420256420746f6b656e7360881b888201526119e1565b825163c45a015560e01b81526004967f00000000000000000000000000000000000000000000000000000000000000008416929186818a81875afa9081156120fb57908591600091612177575b50168551906315ab88c960e31b9182815288818c81895afa90811561214f57611e9e9695949392918a9160009161215a575b50895163e6a4390560e01b815230818f019081526001600160a01b0390921660208301529788918291604090910190565b0381845afa95861561214f57600096612130575b5086861615612056575b5050611ec8833061220e565b611ed2843061220e565b6104b042019283421161204257896060939260c4928951968795869463f305d71960e01b865230908601528d850152600060448501526000606485015230608485015260a48401525af19081156120375790859291600091611ffe575b506010805460ff60a01b1916600160a01b179055845163a9059cbb60e01b815261dead89820152878101919091529283916044918391600091165af1908115611ff357600091611fbd575b5015611f865750505050565b5162461bcd60e51b81529283015260159082015274109d5c9b881314081d1bdad95b9cc819985a5b1959605a1b6044820152606490fd5b8381813d8311611fec575b611fd281836115ad565b8101031261020d5751908115158203610977575038611f7a565b503d611fc8565b82513d6000823e3d90fd5b9250506060823d60601161202f575b8161201a606093836115ad565b8101031261151a576044848693015190611f2f565b3d915061200d565b84513d6000823e3d90fd5b8860118b634e487b7160e01b600052526000fd5b90919450865191825287828b81875afa918215612125579188916120b293600092612106575b5088516364e329cb60e11b815230818e019081526001600160a01b03909316602084015293849283916000918391604090910190565b03925af19081156120fb576000916120ce575b50923880611ebc565b6120ee9150873d89116120f4575b6120e681836115ad565b810190611bd7565b386120c5565b503d6120dc565b86513d6000823e3d90fd5b61211e919250833d85116120f4576120e681836115ad565b903861207c565b87513d6000823e3d90fd5b612148919650893d8b116120f4576120e681836115ad565b9438611eb2565b88513d6000823e3d90fd5b6121719150823d84116120f4576120e681836115ad565b38611e6d565b61218e9150883d8a116120f4576120e681836115ad565b38611e3b565b84634e487b7160e01b60005260116004526000fd5b815163ec442f0560e01b815260006004820152602490fd5b6040513d6000823e3d90fd5b506108fc611c34565b50476007541115611c06565b6006546001600160a01b031633036121f657565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b0390811691821561228c5716908115612273578060005260016020526040600020826000526020527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925602060001980604060002055604051908152a3565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fdfea26469706673582212206154431b010b985116f9cba35c047f3ee6dd7ce023a64aea0eff7d27e2ebc35b64736f6c63430008190033a26469706673582212204f66852f3d62af453ece4dd5101b6347630260a28b230938978aa30ee73b211164736f6c63430008190033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081630c8f5e0014610b20575080631f0cc87414610a9057806328b6003114610a3757806334f359f914610734578063494cfc6c146106b55780634f64b2be1461067557806360bf8c9f146106355780636a1db1bf14610613578063715018a6146105b657806371563f141461057e5780638769678d1461055c5780638da5cb5b14610534578381639470b0bd1461048f575080639f181b5e14610470578063aef9093314610393578063c085221214610355578063c78418b91461031a578063ce7e8de81461031a578063da1d6faf146102fb578063dc8fdf2b14610297578063ddca3f4314610278578063f2fde38b146101ed578063f91ef146146101c75763fd9be5221461012d57600080fd5b346101c357816003193601126101c357610145610b3c565b9060243591610152610d65565b908190478085106101ad57508593849384938493506001600160a01b03908116156101a1575b83918315610197575b1690f11561018d575080f35b51903d90823e3d90fd5b6108fc9250610181565b60055481169150610178565b85516374e0caad60e01b81529182015260249150fd5b8280fd5b8382346101e95760203660031901126101e9576101e2610d65565b3560085580f35b5080fd5b50346101c35760203660031901126101c357610207610b3c565b90610210610d65565b6001600160a01b03918216928315610262575050600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b5050346101e957816003193601126101e9576020906006549051908152f35b5050346101e957806003193601126101e9576102b1610b3c565b90602435918215158093036102f7576102c8610d65565b6001600160a01b0316806102da578380f35b8352600b60205282209060ff801983541691161790553880808380f35b8380fd5b5050346101e957816003193601126101e9576020906007549051908152f35b5050346101e95760203660031901126101e9576020916001600160a01b0390829082610344610b3c565b168152600285522054169051908152f35b5050346101e95760203660031901126101e95760209160ff9082906001600160a01b03610380610b3c565b168152600b855220541690519015158152f35b5090346101c35760a03660031901126101c3576103ae610b3c565b916001600160a01b036024358181169391929084900361046b57338414801590610456575b6104145750807f3fce0d3dc25c88725ebdc9a5d57f2cbb7bb700c5a1f5973d754a6416310a420a91519260643584526084356020850152604435951692a480f35b6020606492519162461bcd60e51b8352820152601b60248201527f546f6b656e204e6f742049737375656420627920466163746f727900000000006044820152fd5b508386526002602052828287205416156103d3565b600080fd5b5050346101e957816003193601126101e9576020906003549051908152f35b8084843461053057816003193601126105305780356001600160a01b0381169081900361052b576104be610d65565b803b1561052b578390604484518096819363f3fef3a360e01b8352338784015260243560248401525af18015610521576104f6578380f35b67ffffffffffffffff831161050e5750528180808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b505050fd5b5050fd5b5050346101e957816003193601126101e957905490516001600160a01b039091168152602090f35b8382346101e95760203660031901126101e957610577610d65565b3560095580f35b5050346101e95760203660031901126101e95760209181906001600160a01b036105a6610b3c565b1681526001845220549051908152f35b83346106105780600319360112610610576105cf610d65565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8382346101e95760203660031901126101e95761062e610d65565b3560065580f35b83346106105760203660031901126106105761064f610b3c565b610657610d65565b60018060a01b03166001600160601b0360a01b600554161760055580f35b5091346106105760203660031901126106105782359254831015610610575061069f602092610b97565b905491519160018060a01b039160031b1c168152f35b5082346106105782600319360112610610575035602435906106d682610caf565b92815b6106e38484610ce1565b811015610723576001816106f96106e393610b97565b838060a01b0391549060031b1c1661071a6107148784610d04565b89610d11565b520190506106d9565b8151806107308782610b52565b0390f35b50919060803660031901126101e95767ffffffffffffffff9280358481116102f7576107639036908301610c50565b916024948535818111610a335761077d9036908501610c50565b6001600160a01b0394604435916064358781169190829003610a2f576006546107a68582610ce1565b3410610a1a5750818952602094600b865260ff878b20541615610a0a5760075492600a54908a6005541660085492600954958b51986129d4808b01978b8910908911176109f6578c6101409795936108168d9c9b9a989694610823948e610d929039610160808b528a0190610d25565b9188830390890152610d25565b978d86015260608501526080840152601460a084015260c08301523360e0830152876101008301526101208201520152039087f080156109ec5785879116918061096c575b50503386526001825282862094855468010000000000000000968782101561095a579061089a91600182018155610be4565b81549060031b908385831b921b191617905581875260028352838720336001600160601b0360a01b825416179055845495861015610948576109038660017fd5f9bdf12adf29dab0248c349842c3822d53ae2bb4f36352f301630d018c81399798018855610b97565b819291549060031b9184831b921b1916179055825191338352820152a1600354906000198214610937575060010160035580f35b634e487b7160e01b83526011905250fd5b634e487b7160e01b8752604185528787fd5b634e487b7160e01b8952604187528989fd5b81808092855af13d156109e7573d61098381610c34565b9061099086519283610bfc565b815287843d92013e5b156109a5578538610868565b825162461bcd60e51b8152808501839052601a818901527f5472616e7366657220496e697469616c457468206661696c65640000000000006044820152606490fd5b610999565b83513d88823e3d90fd5b5050634e487b7160e01b8f5260418d528f8ffd5b865163ac566cef60e01b81528890fd5b878b91885191632b2d105360e21b8352820152fd5b8880fd5b8580fd5b5050346101e957806003193601126101e957610a51610b3c565b6001600160a01b0390811683526001602052818320805460243594908510156106105750602093610a8191610be4565b92905490519260031b1c168152f35b82843461061057606036600319011261061057610aab610b3c565b6044359160243591610abc84610caf565b916001600160a01b03918216845b610ad48787610ce1565b811015610b13576001610ad4918385528160205285610af5828c8820610be4565b90549060031b1c16610b0a6107148a84610d04565b52019050610aca565b8751806107308782610b52565b8490346101e957816003193601126101e957602090600a548152f35b600435906001600160a01b038216820361046b57565b602090602060408183019282815285518094520193019160005b828110610b7a575050505090565b83516001600160a01b031685529381019392810192600101610b6c565b600454811015610bce5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015610bce5760005260206000200190600090565b90601f8019910116810190811067ffffffffffffffff821117610c1e57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610c1e57601f01601f191660200190565b81601f8201121561046b57803590610c6782610c34565b92610c756040519485610bfc565b8284526020838301011161046b57816000926020809301838601378301015290565b67ffffffffffffffff8111610c1e5760051b60200190565b90610cb982610c97565b610cc66040519182610bfc565b8281528092610cd7601f1991610c97565b0190602036910137565b91908201809211610cee57565b634e487b7160e01b600052601160045260246000fd5b91908203918211610cee57565b8051821015610bce5760209160051b010190565b919082519283825260005b848110610d51575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610d30565b6000546001600160a01b03163303610d7957565b60405163118cdaa760e01b8152336004820152602490fdfe60e060405234610554576129d48038038061001981610559565b928339810190610160818303126105545780516001600160401b038111610554578261004691830161057e565b602082015190926001600160401b0382116105545761006691830161057e565b9160408201519160608101519261007f608083016105e9565b9060a083015161009160c085016105e9565b9061009e60e086016105e9565b96610100860151986101406101208801519701519780519060018060401b0382116104365760035490600182811c9216801561054a575b60208310146104165781601f8493116104dd575b50602090601f83116001146104575760009261044c575b50508160011b916000199060031b1c1916176003555b8051906001600160401b0382116104365760045490600182811c9216801561042c575b60208310146104165781601f8493116103a9575b50602090601f831160011461032357600092610318575b50508160011b916000199060031b1c1916176004555b60016005556001600160a01b039388851680156102ff57600654818782167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360018060a81b03199182600960a11b921617176006556b033b2e3c9fd0803ce800000060a0526b0295be96e64066972000000060c052674563918244f40000600e5560105490339116176010556007556008558260018060a01b03199416846009541617600955600a55168091600b541617600b55608052600f55601155610261600d5461025c610257856102518461068e565b9361060a565b61068e565b6105fd565b90670de0b6b3a7640000918281029281840414901517156102e9576102b5926102a2836102aa9361029d6102978360c0516105fd565b30610617565b610617565b600d5461060a565b600d55600c5461060a565b600c556040516122db90816106f982396080518181816106220152611dff015260a051816101ea015260c051816114a10152f35b634e487b7160e01b600052601160045260246000fd5b604051631e4fbdf760e01b815260006004820152602490fd5b015190503880610164565b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9350601f198516905b8181106103915750908460019594939210610378575b505050811b0160045561017a565b015160001960f88460031b161c1916905538808061036a565b92936020600181928786015181550195019301610354565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81016020851061040f575b90849392915b601f830160051c8201811061040057505061014d565b600081558594506001016103ea565b50806103e4565b634e487b7160e01b600052602260045260246000fd5b91607f1691610139565b634e487b7160e01b600052604160045260246000fd5b015190503880610100565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9350601f198516905b8181106104c557509084600195949392106104ac575b505050811b01600355610116565b015160001960f88460031b161c1916905538808061049e565b92936020600181928786015181550195019301610488565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c810160208510610543575b90849392915b601f830160051c820181106105345750506100e9565b6000815585945060010161051e565b5080610518565b91607f16916100d5565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761043657604052565b919080601f840112156105545782516001600160401b038111610436576020906105b0601f8201601f19168301610559565b928184528282870101116105545760005b8181106105d657508260009394955001015290565b85810183015184820184015282016105c1565b51906001600160a01b038216820361055457565b919082039182116102e957565b919082018092116102e957565b6001600160a01b0316908115610675577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208261065960009460025461060a565b60025584845283825260408420818154019055604051908152a3565b60405163ec442f0560e01b815260006004820152602490fd5b670de0b6b3a7640000808202918083048214901517156102e957679180fc0274e7d800910481018091116102e95780156106e257633fd62a38906b244877b9b6a27473abc000000481039081116102e95790565b634e487b7160e01b600052601260045260246000fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826305c868101461148a575081630660b3871461146b57816306f697751461144857816306fdde031461135157816308ff45a214611335578163095ea7b31461128b5781630bc37e6914610e225781630c8f5e0014610e0357816314082f0214610de757816318160ddd14610dc857816323b872dd14610ccf57816326a49e3714610ca5578163313ce56714610c805781633268cc5614610c575781634127535814610c2e5781635cc4c74114610c0e57816370a0823114610bd757816370baed4314610bb857816370db69d614610b99578163715018a614610b3b578163867433d014610b145781638da5cb5b14610aeb57816395d89b41146109ce5781639655b32c146109ab578163a9059cbb1461097a578163b80c51c814610954578163c80a91bc14610931578163d325aa4f14610912578163d6febde8146106be578163da1d6faf1461069f578163dd62ed3e14610651578163deadbc141461060d578163e4849b3214610457578163e71bfbeb14610438578163f2fde38b146103a7578163f3fef3a31461022d57508063fccc2813146102115763ff99574b146101d45780610012565b3461020d578160031936011261020d57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b503461020d578160031936011261020d576020905161dead8152f35b919050346103a357806003193601126103a35781356001600160a01b0381169081900361039f57602435906102606121e2565b60ff60105460a01c161561036d5747821161036957825191602083019167ffffffffffffffff9380841085851117610354578386528790528692839283925af1903d1561034e573d908111610339578251906102c6601f8201601f1916602001836115ad565b81528460203d92013e5b156102d9578280f35b906020608492519162461bcd60e51b8352820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152fd5b604184634e487b7160e01b6000525260246000fd5b506102d0565b604187634e487b7160e01b6000525260246000fd5b8480fd5b825162461bcd60e51b8152602081860152600c60248201526b131a5c591d1e555b9cd95b9d60a21b6044820152606490fd5b8380fd5b8280fd5b9050346103a35760203660031901126103a3576103c261151f565b906103cb6121e2565b6001600160a01b03918216928315610422575050600654826bffffffffffffffffffffffff60a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b50503461020d578160031936011261020d57602090600d549051908152f35b9050346103a35760203660031901126103a357803590610475611ad6565b60ff60105460a01c166105ff5761048e82600d5461163c565b928347106105e2579084916127106104a860085487611629565b046104b38187611606565b6104be863033611af9565b8480808060018060a01b039586600954168282156105d9575bf1156105cf5784808080938181156105c6575b3390f1156105bc57610528600c54835161050381611591565b60138152721b995d109bdd59da1d151bdad95b9cce880959606a1b6020820152611a91565b6010541691823b1561039f57839260a484928451958693849263aef9093360e01b84523390840152306024840152600160448401528960648401528a60848401525af19081156105b3575061059f575b505061058961059492600d54611606565b600d55600c54611606565b600c55600160055580f35b6105a89061154b565b6103a3578238610578565b513d84823e3d90fd5b81513d85823e3d90fd5b506108fc6104ea565b82513d86823e3d90fd5b506108fc6104d7565b908360449247905192633689605760e21b84528301526024820152fd5b825163c9c297f760e01b8152fd5b50503461020d578160031936011261020d57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461020d578060031936011261020d5760209161066e61151f565b82610677611535565b6001600160a01b03928316845260018652922091166000908152908352819020549051908152f35b50503461020d578160031936011261020d576020906007549051908152f35b83836106c936611504565b936106d2611ad6565b60ff60105460a01c166105ff57600d54916106ed81846118f9565b61271090816106fe60085483611629565b049161070a83836118ec565b95600e548084116108fc57508634106108e05730895288602052878920548086116108c457508461073a916118f9565b9881018082116108b15761074e908a611629565b0481116108955786808080809b5060018060a09c9b9c1b0395866009541682821561088c575bf1156108825761079190610789843330611af9565b600d546118ec565b600d556107a082600c546118ec565b600c556010541691823b1561036957855163aef9093360e01b815233918101918252306020830152600060408301526060820192909252608081018490529091849183919082908490829060a00103925af1908115610878578391610864575b505080341161082d575b505050476007541115610820575b600160055580f35b610828611bf6565b610818565b818061083a819334611606565b81811561085b575b3390f11561085157818161080a565b51903d90823e3d90fd5b506108fc610842565b61086d9061154b565b61020d578185610800565b84513d85823e3d90fd5b86513d87823e3d90fd5b506108fc610774565b83886044928851926371c4efed60e01b84528301526024820152fd5b634e487b7160e01b895260118652602489fd5b86866044928b519263c7bcc1b960e01b84528301526024820152fd5b875162fdf57560e51b8152348188015260248101889052604490fd5b866024918a51916335fcf16360e01b8352820152fd5b50503461020d578160031936011261020d57602090600c549051908152f35b50503461020d5760209061094d61094736611504565b906119a6565b9051908152f35b828434610977576020366003190112610977575061094d60209235600d5461163c565b80fd5b50503461020d578060031936011261020d576020906109a461099a61151f565b6024359033611af9565b5160018152f35b828434610977576020366003190112610977575061094d60209235600d546118f9565b8284346109775780600319360112610977578151918184549260018460011c9160018616958615610ae1575b6020968785108114610ace579087899a92868b999a9b529182600014610aa4575050600114610a49575b8588610a4589610a36848a03856115ad565b519282849384528301906114c4565b0390f35b815286935091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610a8c5750505082010181610a36610a4588610a24565b8054848a018601528895508794909301928101610a72565b60ff19168882015294151560051b87019094019450859350610a369250610a459150899050610a24565b634e487b7160e01b835260228a52602483fd5b92607f16926109fa565b50503461020d578160031936011261020d5760065490516001600160a01b039091168152602090f35b50503461020d578160031936011261020d5760209060ff60105460a01c1690519015158152f35b8334610977578060031936011261097757610b546121e2565b600680546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461020d578160031936011261020d57602090600e549051908152f35b50503461020d578160031936011261020d576020906011549051908152f35b50503461020d57602036600319011261020d5760209181906001600160a01b03610bff61151f565b16815280845220549051908152f35b828434610977576020366003190112610977575061094d6020923561195d565b50503461020d578160031936011261020d5760095490516001600160a01b039091168152602090f35b50503461020d578160031936011261020d57600b5490516001600160a01b039091168152602090f35b50503461020d578160031936011261020d5760209060ff60065460a01c169051908152f35b828434610977576020366003190112610977575061094d60209235610cc98161195d565b906115fc565b8391503461020d57606036600319011261020d57610ceb61151f565b610cf3611535565b91604435938560018060a01b03841691828152600160205220336000526020528560002054916000198303610d31575b6020876109a4888888611af9565b858310610d9c578115610d85573315610d6e57506000908152600160209081528682203383528152908690209185900390915582906109a4610d23565b6024906000885191634a1406b160e11b8352820152fd5b602490600088519163e602df0560e01b8352820152fd5b8651637dc7a0d960e11b8152339181019182526020820193909352604081018690528291506060010390fd5b50503461020d578160031936011261020d576020906002549051908152f35b50503461020d5760209061094d610dfd36611504565b906118f9565b50503461020d578160031936011261020d576020906008549051908152f35b8383610e2d36611504565b93610e36611ad6565b60ff60105460a01c166105ff57600e548083116112755750600d5460075495845196610e6188611575565b60278852610ea781848760209b7f616d6f756e742025642c657468506169642025642c7461726765744d61726b658d820152661d10d85c08095960ca1b8b8201526119e1565b610efc81610eb585886118ec565b8851610ec081611575565b602681527f616d6f756e74202b20657468506169642025642c7461726765744d61726b65748c8201526510d85c08095960d21b8a820152611a46565b610f0683866118ec565b11611265576127109081610f1c60085487611629565b0491610f2883876118ec565b3481116112485750610f43610f3d87866119a6565b876115fc565b610f4d87866119a6565b94610f5888826118ec565b600d55610fb882878d7f425559574954484554483a3a20746f6b656e73546f4275792025642c206578708d5191610f8e83611575565b60368352820152751958dd1959141c9a58d954195c951bdad95b8e88095960521b8d820152611a46565b308a52898b52888a205480871161122c5750308a52898b52611021868a8c20548d7f63757272656e74546f6b656e42616c616e6365202564202c20746f6b656e73548d519161100683611575565b60278352820152661bd09d5e48095960ca1b8d820152611a46565b8980808060018060a01b03988960095416828215611223575bf11561121957856110cb6110d0926110c3838f8f908f91826c1bdad95b9cd51bd09d5e480959609a1b9161106f863330611af9565b61107b86600c546118ec565b600c553081528084522054927f63757272656e74546f6b656e42616c616e6365206166746572202564202c20748151936110b485611575565b602d8552840152820152611a46565b600d54611606565b6115fc565b9282019081831161120657906110e591611629565b04908181116111ea5750506010541691823b156111e657845163aef9093360e01b8152339181019182523060208301526000604083015260608201929092526080810193909352918491839182908490829060a00103925af180156111da576111c7575b506111b5919247600c54917f75676874546f6b656e732025642c206574685061696420256400000000000000600d54947f616464726573732874686973292e62616c616e6365202564202c206e6574426f8151936111a685611575565b603985528401528201526119e1565b47600754111561082057600160055580f35b916111d46111b59361154b565b91611149565b505051903d90823e3d90fd5b8580fd5b60449185918851926371c4efed60e01b84528301526024820152fd5b634e487b7160e01b8a526011875260248afd5b88513d8b823e3d90fd5b506108fc61103a565b87876044928c519263c7bcc1b960e01b84528301526024820152fd5b875162fdf57560e51b815234818801526024810191909152604490fd5b8451635c3ac05760e01b81528390fd5b83516335fcf16360e01b81529182015260249150fd5b9050346103a357816003193601126103a3576112a561151f565b60243590331561131e576001600160a01b031691821561130757508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b50503461020d5760209061094d61134b36611504565b9061163c565b828434610977578060031936011261097757815191816003549260018460011c916001861695861561143e575b6020968785108114610ace578899509688969785829a5291826000146114175750506001146113bb575b505050610a459291610a369103856115ad565b9190869350600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106113ff5750505082010181610a36610a456113a8565b8054848a0186015288955087949093019281016113e6565b60ff19168782015293151560051b86019093019350849250610a369150610a4590506113a8565b92607f169261137e565b828434610977576020366003190112610977575061094d60209235600d546119a6565b50503461020d578160031936011261020d57602090600a549051908152f35b84903461020d578160031936011261020d576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b919082519283825260005b8481106114f0575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016114cf565b604090600319011261151a576004359060243590565b600080fd5b600435906001600160a01b038216820361151a57565b602435906001600160a01b038216820361151a57565b67ffffffffffffffff811161155f57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761155f57604052565b6040810190811067ffffffffffffffff82111761155f57604052565b90601f8019910116810190811067ffffffffffffffff82111761155f57604052565b80156115e6576b244877b9b6a27473abc000000490565b634e487b7160e01b600052601260045260246000fd5b81156115e6570490565b9190820391821161161357565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561161357565b6116458161195d565b9061165a670de0b6b3a7640000840483611606565b906116c48260409586519561166e87611575565b603e87526020967f53454c4c494e473a3a20696e697469616c546f6b656e732025642c20746f6b65888201527f6e73546f53656c6c202564202c20746172676574546f6b656e73202564200000898201526119e1565b8351916116d083611591565b8383527f53454c4c494e473a3a204b202025642c204b2f505245434953494f4e20256420848401528451611743816117208782019663ca47c4eb60e01b88526060602484015260848301906114c4565b679180fc0274e7d8006044830152600a606483015203601f1981018352826115ad565b60008094819251906a636f6e736f6c652e6c6f675afa50633fd62a389081039081116118d857806117a961180e92875161177c81611591565b8781527f53454c4c494e473a3a202846202d20746172676574546f6b656e73292025642088820152611a91565b6118096117b5826115cf565b87516117c081611575565b603381527f53454c4c494e473a3a202854202a20505245434953494f4e20202f202846202d88820152720103a30b933b2ba2a37b5b2b73994949012b21606d1b89820152611a91565b6115cf565b679180fc0274e7d7ff198101929083116118c45750916118a782846118a287956118c1977f53454c4c494e473a3a20657468546f52657475726e2025642000000000000000995161185e81611575565b602e81527f53454c4c494e473a3a20746f74616c457468496e436f6e74726163742025642c888201526d0103a30b933b2ba22ba341012b2160951b89820152611a46565b611606565b93849251916118b583611591565b60198352820152611a91565b90565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b9190820180921161161357565b906119038261195d565b670de0b6b3a7640000918282029180830484149015171561161357611927916118ec565b04633fd62a3890810390811161161357611940906115cf565b679180fc0274e7d7ff19810191908211611613576118c191611606565b670de0b6b3a76400008082029180830482149015171561161357679180fc0274e7d8009104810180911161161357611994906115cf565b633fd62a389081039081116116135790565b6118a26119bf6119c4936119b98461195d565b936118ec565b61195d565b670de0b6b3a7640000908181029181830414901517156116135790565b9092611a33600094938594604051938492611a15602085019763a7a8785360e01b89526080602487015260a48601906114c4565b9260448501526064840152608483015203601f1981018352826115ad565b51906a636f6e736f6c652e6c6f675afa50565b60009291611a338493604051928391611a78602084019663ca47c4eb60e01b88526060602486015260848501906114c4565b916044840152606483015203601f1981018352826115ad565b600091908291611a336040518092611ac26020830195632d839cb360e21b87526040602485015260648401906114c4565b90604483015203601f1981018352826115ad565b600260055414611ae7576002600555565b604051633ee5aeb560e01b8152600490fd5b916001600160a01b03808416928315611bbe5716928315611ba55760009083825281602052604082205490838210611b73575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b9081602091031261151a57516001600160a01b038116810361151a5790565b60ff60105460a01c1615806121d6575b611c0c57565b600f54611c198147611606565b90600080808060018060a01b039485600954168282156121cd575bf1156121c15730600052602060008152604080600020549230156121a957600254936aa56fa5b99019a5c80000009081860180961161161357606095600255306000526000855283600020828154019055835182815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef873093a36000808551611cbf81611575565b602781527f63757272656e74546f6b656e42616c616e6365202564202c20746f6b656e416d88820152661bdd5b9d08095960ca1b878201528651611d3981611d1f8b82019463ca47c4eb60e01b865260249d8e84015260848301906114c4565b87604483015288606483015203601f1981018352826115ad565b51906a636f6e736f6c652e6c6f675afa503060005260008552611d8684600020548551611d6581611591565b601081526f03732bb903130b61036b4b73a1012b2160851b88820152611a91565b810180911161219457611dee81611d9d81896115fc565b888651611da981611575565b602f81527f6c6971202564202c207072696365506572546f6b656e20256420746f6b656e41898201526e6d6f756e7420256420746f6b656e7360881b888201526119e1565b825163c45a015560e01b81526004967f00000000000000000000000000000000000000000000000000000000000000008416929186818a81875afa9081156120fb57908591600091612177575b50168551906315ab88c960e31b9182815288818c81895afa90811561214f57611e9e9695949392918a9160009161215a575b50895163e6a4390560e01b815230818f019081526001600160a01b0390921660208301529788918291604090910190565b0381845afa95861561214f57600096612130575b5086861615612056575b5050611ec8833061220e565b611ed2843061220e565b6104b042019283421161204257896060939260c4928951968795869463f305d71960e01b865230908601528d850152600060448501526000606485015230608485015260a48401525af19081156120375790859291600091611ffe575b506010805460ff60a01b1916600160a01b179055845163a9059cbb60e01b815261dead89820152878101919091529283916044918391600091165af1908115611ff357600091611fbd575b5015611f865750505050565b5162461bcd60e51b81529283015260159082015274109d5c9b881314081d1bdad95b9cc819985a5b1959605a1b6044820152606490fd5b8381813d8311611fec575b611fd281836115ad565b8101031261020d5751908115158203610977575038611f7a565b503d611fc8565b82513d6000823e3d90fd5b9250506060823d60601161202f575b8161201a606093836115ad565b8101031261151a576044848693015190611f2f565b3d915061200d565b84513d6000823e3d90fd5b8860118b634e487b7160e01b600052526000fd5b90919450865191825287828b81875afa918215612125579188916120b293600092612106575b5088516364e329cb60e11b815230818e019081526001600160a01b03909316602084015293849283916000918391604090910190565b03925af19081156120fb576000916120ce575b50923880611ebc565b6120ee9150873d89116120f4575b6120e681836115ad565b810190611bd7565b386120c5565b503d6120dc565b86513d6000823e3d90fd5b61211e919250833d85116120f4576120e681836115ad565b903861207c565b87513d6000823e3d90fd5b612148919650893d8b116120f4576120e681836115ad565b9438611eb2565b88513d6000823e3d90fd5b6121719150823d84116120f4576120e681836115ad565b38611e6d565b61218e9150883d8a116120f4576120e681836115ad565b38611e3b565b84634e487b7160e01b60005260116004526000fd5b815163ec442f0560e01b815260006004820152602490fd5b6040513d6000823e3d90fd5b506108fc611c34565b50476007541115611c06565b6006546001600160a01b031633036121f657565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b0390811691821561228c5716908115612273578060005260016020526040600020826000526020527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925602060001980604060002055604051908152a3565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fdfea26469706673582212206154431b010b985116f9cba35c047f3ee6dd7ce023a64aea0eff7d27e2ebc35b64736f6c63430008190033a26469706673582212204f66852f3d62af453ece4dd5101b6347630260a28b230938978aa30ee73b211164736f6c63430008190033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2724,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "ownerTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2728,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "tokenCreators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2730,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "tokenCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2733,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2735,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "adminPaymentAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2738,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2741,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "targetMarketCap",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2744,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "deployLiquidityFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2747,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "liquidityAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2750,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "transactionFeePercent",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2754,
        "contract": "contracts/PopCoinFactory.sol:PopCoinFactory",
        "label": "routersSupported",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}